.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CHI::Driver::DBI 3"
.TH CHI::Driver::DBI 3 "2010-05-19" "perl v5.12.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CHI::Driver::DBI \- Use DBI for cache storage
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use CHI;
\&
\& # Supply a DBI handle
\& #
\& my $cache = CHI\->new( driver => \*(AqDBI\*(Aq, dbh => DBI\->connect(...) );
\&
\& # or a DBIx::Connector
\& #
\& my $cache = CHI\->new( driver => \*(AqDBI\*(Aq, dbh => DBIx::Connector\->new(...) );
\&
\& # or code that generates a DBI handle
\& #
\& my $cache = CHI\->new( driver => \*(AqDBI\*(Aq, dbh => sub { ...; return $dbh } );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This driver uses a database table to store the cache.  The newest versions of
MySQL and SQLite work are known to work.  Other RDBMSes should work.
.PP
Why cache things in a database?  Isn't the database what people are trying to
avoid with caches?  This is often true, but a simple primary key lookup is
extremely fast in many databases and this provides a shared cache that can be
used when less reliable storage like memcached is not appropriate.  Also, the
speed of simple lookups on MySQL when accessed over a local socket is very hard
to beat.  \s-1DBI\s0 is fast.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "namespace" 4
.IX Item "namespace"
The namespace you pass in will be appended to the \f(CW\*(C`table_prefix\*(C'\fR and used as a
table name.  That means that if you don't specify a namespace or table_prefix
the cache will be stored in a table called \f(CW\*(C`chi_Default\*(C'\fR.
.IP "table_prefix" 4
.IX Item "table_prefix"
This is the prefix that is used when building a table name.  If you want to
just use the namespace as a literal table name, set this to undef.  Defaults to
\&\f(CW\*(C`chi_\*(C'\fR.
.IP "dbh" 4
.IX Item "dbh"
The main, or rw, \s-1DBI\s0 handle used to communicate with the db. If a dbh_ro handle
is defined then this handle will only be used for writing.
.Sp
You may pass this handle, and dbh_ro below, in one of three forms:
.RS 4
.IP "\(bu" 4
a regular \s-1DBI\s0 handle
.IP "\(bu" 4
a DBIx::Connector object
.IP "\(bu" 4
a code reference that will be called each time and is expected to return a \s-1DBI\s0
handle, e.g.
.Sp
.Vb 1
\&    sub { My::Rose::DB\->new\->dbh }
.Ve
.RE
.RS 4
.Sp
The last two options are valuable if your \s-1CHI\s0 object is going to live for
enough time that a single \s-1DBI\s0 handle might time out, etc.
.RE
.IP "dbh_ro" 4
.IX Item "dbh_ro"
The optional \s-1DBI\s0 handle used for read-only operations.  This is to support
master/slave \s-1RDBMS\s0 setups.
.IP "sql_strings" 4
.IX Item "sql_strings"
Hashref of \s-1SQL\s0 strings to use in the different cache operations. The strings
are built depending on the \s-1RDBMS\s0 that dbh is attached to.
.SH "METHODS"
.IX Header "METHODS"
.IP "\s-1BUILD\s0" 4
.IX Item "BUILD"
Standard issue Moose \s-1BUILD\s0 method.  Used to build the sql_strings.  If the
parameter \f(CW\*(C`create_table\*(C'\fR to \f(CW\*(C`new()\*(C'\fR was set to true, it will attempt to
create the db table.  For Mysql and SQLite the statement is \*(L"create if not
exists...\*(R" so it's generally harmless.
.IP "fetch" 4
.IX Item "fetch"
.PD 0
.IP "store" 4
.IX Item "store"
.IP "remove" 4
.IX Item "remove"
.IP "clear" 4
.IX Item "clear"
.IP "get_keys" 4
.IX Item "get_keys"
.IP "get_namespaces" 4
.IX Item "get_namespaces"
.PD
Not supported at this time.
.SH "Authors"
.IX Header "Authors"
Original version by Justin DeVuyst and Perrin Harkins. Currently maintained by
Jonathan Swartz.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) Justin DeVuyst
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
